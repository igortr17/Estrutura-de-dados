using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ArvoreDeBusca
{
    class Program
    {
        static void Main(string[] args)
        {
            Arvore tree = new Arvore();
            int opc = 0;

            do
            {
                Console.WriteLine("                                       Menu                                       \n");
                Console.WriteLine("1- Inserir valor na árvore");
                Console.WriteLine("2- Buscar valor na árvore");
                Console.WriteLine("3- Excluir valor da árvore");
                Console.WriteLine("4- Exibir valores em pré ordem");
                Console.WriteLine("5- Exibir valores em ordem");
                Console.WriteLine("6- Exibir valores em pós ordem");
                Console.WriteLine("7- Ver a altura da árvore");
                Console.WriteLine("8- Imprimir a árvore");
                Console.WriteLine("9- Sair ");
                opc = Convert.ToInt32(Console.ReadLine());
                Console.Clear();
                switch (opc)
                {
                    case 1:
                        Console.WriteLine("Informe o valor a ser inserido:");
                        int val = Convert.ToInt32(Console.ReadLine());
                        tree.Inserir(val);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 2:
                        Console.WriteLine("Informe o valor que deseja pesquisar:");
                        val = Convert.ToInt32(Console.ReadLine());
                        tree.Busca(tree.Root, val);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 3:
                        Console.WriteLine("Informe o valor a ser excluído:");
                        val = Convert.ToInt32(Console.ReadLine());
                        tree.Excluir(tree.Root, val);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 4:
                        Console.WriteLine("Exibindo os valores em pré ordem");
                        tree.PreOrdem(tree.Root);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 5:
                        Console.WriteLine("Exibindo os valores em em ordem");
                        tree.EmOrdem(tree.Root);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 6:
                        Console.WriteLine("Exibindo os valores em pré ordem");
                        tree.PosOrdem(tree.Root);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 7:
                        Console.WriteLine("Altura da Árvore: " + tree.Altura(tree.Root));
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 8:
                        tree.print(tree.Root, 0);
                        Console.ReadKey();
                        Console.Clear();
                        break;
                    case 9:
                        Console.Clear();
                        break;
                    default:
                        Console.WriteLine("Opção inválida, tente novamente.");
                        Console.ReadKey();
                        Console.Clear();
                        break;
                }

            } while (opc != 9);
        }
    }
}

===========================================================================================================================================
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ArvoreDeBusca
{
    class Noh
    {
        int? valor;
        Noh anterior, esquerda, direita;

        public int? getValor
        {
            get { return valor; }
        }

        public Noh getAnterior
        {
            get { return anterior; }
        }

        public Noh getDireita
        {
            get { return direita; }
        }

        public Noh getEsquerda
        {
            get { return esquerda; }
        }

        public void setValor(int? val)
        {
            valor = val;
        }

        public void setAnterior(Noh no)
        {
            anterior = no;
        }

        public void setDireita(Noh no)
        {
            direita = no;
        }

        public void setEsquerda(Noh no)
        {
            esquerda = no;
        }
    }

}

=============================================================================================================================================

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ArvoreDeBusca
{
    class Arvore
    {
        Noh root = new Noh();
        public void Inserir(int valor)
        {
            Noh newNo = new Noh();
            newNo.setValor(valor);
            if (root.getValor == null)
            {
                root.setValor(valor);
                root.setDireita(null);
                root.setEsquerda(null);
            }
            else
            {
                Noh aux = BuscaInsercao(valor);
                if (aux == null)
                {
                    Console.Write("Valor já existe na estrutura.");
                }
                else if (valor > aux.getValor)
                {
                    aux.setDireita(newNo);
                }
                else
                {
                    aux.setEsquerda(newNo);
                }
            }

        }

        public Noh BuscaInsercao(int vl)
        {
            Noh no = root;
            bool flag = true;
            do
            {
                if (vl > no.getValor)
                {
                    if (no.getDireita == null)
                    {
                        flag = false;
                        return no;
                    }
                    else
                    {
                        no = no.getDireita;
                    }
                }
                else if (vl < no.getValor)
                {
                    if (no.getEsquerda == null)
                    {
                        flag = false;
                        return no;
                    }
                    else
                    {
                        no = no.getEsquerda;
                    }
                }
                else
                {
                    flag = false;
                }

            } while (flag);
            return null;
        }
    }
}
